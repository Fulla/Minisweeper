{"version":3,"sources":["Reducers/game.js","Reducers/index.js","constants.js","serviceWorker.js","apiRequests.js","Actions/gameActions.js","Components/Board.js","Components/Button.js","store.js","Containers/Game.js","index.js"],"names":["initialState","board","files","columns","state","combineReducers","game","action","type","b","Array","map","item","fill","num","safepoints","sfpoints","sf","x","y","Boolean","window","location","hostname","match","makeRequest","url","request","headers","Headers","fetch","then","response","json","fetchGameState","method","res","data","startBoard","setSafePoints","getGameState","dispatch","getState","gameState","startGame","body","JSON","stringify","resumeGame","Board","renderCells","row","cell","index","key","className","renderRows","table","this","props","React","Component","Button","onClick","title","Game","gameActions","console","log","connect","bindActionCreators","GameActions","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6XASMA,EAAe,CACnBC,MAAO,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,MACjHC,MAAO,EACPC,QAAS,EACTC,MAAO,WCTMC,kBAAgB,CAC7BC,KDWa,WAAgD,IAA/BF,EAA8B,uDAAtBJ,EAAcO,EAAQ,uCAC5D,OAAQA,EAAOC,MACb,IEjBuB,cFkBrB,IAAIC,EAAI,YAAIC,MAAMH,EAAOL,QAAQS,KAAI,SAAAC,GAAI,OAAIF,MAAMH,EAAOJ,SAASU,KAAK,QACxE,OAAO,eACFT,EADL,CAEEH,MAAOQ,EACPP,MAAOK,EAAOL,MACdC,QAASI,EAAOJ,QAChBC,MAAOG,EAAOH,QAElB,IE3B0B,iBF4BxB,IAAIH,EAAQG,EAAMH,MAClB,IAAK,IAAIa,KAAOP,EAAOQ,WAAY,CACjC,IAAIC,EAAWT,EAAOQ,WAAWD,GADA,uBAEjC,YAAeE,EAAf,+CAAyB,CAAC,IAAjBC,EAAgB,QACnBA,EAAGC,GAAKd,EAAMF,OAASe,EAAGE,GAAKf,EAAMD,SAAWc,EAAGC,EAAI,GAAKD,EAAGE,EAAI,IAGvElB,EAAMgB,EAAGC,GAAGD,EAAGE,GAAKL,IANW,mFASnC,OAAO,eACFV,EADL,CAEEH,MAAOQ,IAEX,QACE,OAAOL,MG/BOgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CChBN,SAASC,EAAYC,EAAKC,GAIxB,OAHAA,EAAQC,QAAU,IAAIC,QAAQ,CAC5B,eAAgB,qBAEXC,MAAM,GAAD,OFHU,0BEGV,YAAgBJ,GAAOC,GAClCI,MACG,SAACC,GAAD,OAAcA,EAASC,UAItB,SAASC,IAId,OAAOT,EAAY,SAHL,CACZU,OAAQ,QAGTJ,MACC,SAACK,GAAD,OAASA,EAAIC,QCbjB,SAASC,EAAWpC,EAAOC,EAASC,GAClC,MAAO,CACLI,KHNuB,cGOzBN,QACAC,UACAC,SAIF,SAASmC,EAAcxB,GACrB,MAAO,CACLP,KHhB0B,iBGiB1BO,cAOG,SAASyB,IAEd,OAAO,SAACC,EAAUC,GAEhB,OAAOR,IACNH,MACC,SAACY,GACCF,EAASH,EAAWK,EAAUzC,MAAOyC,EAAUxC,QAASwC,EAAUvC,QAClEqC,EAASF,EAAcI,EAAU5B,iBAOlC,SAAS6B,IAEd,OAAO,SAACH,EAAUC,GAEhB,ODZIjB,EAAY,MAPL,CACbU,OAAQ,OACRU,KAAMC,KAAKC,UAAU,CACjB7C,MAAO,GACPC,QAAS,OAIb4B,MACA,SAACK,GAAD,OAASA,EAAIC,QCWVN,MACC,SAACY,GACCF,EAASH,EAAWK,EAAUzC,MAAOyC,EAAUxC,QAASwC,EAAUvC,QAClEqC,EAASF,EAAcI,EAAU5B,iBAOlC,SAASiC,IAEd,OAAO,SAACP,EAAUC,GAEhB,OAAOR,IACNH,MACC,SAACY,GACCF,EAASH,EAAWK,EAAUzC,MAAOyC,EAAUxC,QAASwC,EAAUvC,QAClEqC,EAASF,EAAcI,EAAU5B,iB,SCjB1BkC,E,2MAxCX7C,MAAQ,G,EAER8C,YAAc,SAACC,GAChB,OAAOA,EAAIxC,KAAI,SAACyC,EAAMC,GACpB,OACE,wBAAIC,IAAKD,EAAOE,UAAU,QAAQH,O,EAKvCI,WAAa,SAACC,GACb,OAAOA,EAAM9C,KAAI,SAACwC,EAAKE,GACtB,OACE,wBAAIC,IAAKD,GACP,EAAKH,YAAYC,Q,wEAMX,IACHlD,EAAUyD,KAAKC,MAAf1D,MAER,OACC,yBAAKsD,UAAU,SACH,MAATtD,GACD,+BACC,+BACEyD,KAAKF,WAAWvD,U,GA7BL2D,IAAMC,WCGXC,ICFC9D,EDED8D,EAJf,SAAgBH,GACd,OAAO,yBAAKJ,UAAU,SAASQ,QAASJ,EAAMpD,QAASoD,EAAMK,QEKzDC,E,2MACF7D,MAAQ,G,wEAEE,IACHH,EAAUyD,KAAKC,MAAMrD,KAArBL,MADE,EAEwByD,KAAKC,MAAMO,YAArCtB,EAFE,EAEFA,UAAWI,EAFT,EAESA,WAKnB,OAHAmB,QAAQC,IAAInE,GAIX,yBAAKsD,UAAU,OACd,2CACA,kBAAC,EAAD,CAAOtD,MAAOA,IACd,yBAAKsD,UAAU,WACd,kBAAC,EAAD,CAAQS,MAAM,WAAWzD,OAAQqC,IACjC,kBAAC,EAAD,CAAQoB,MAAM,cAAczD,OAAQyC,U,GAhBvBY,IAAMC,WAwBVQ,eACb,SAAAjE,GAAK,MAAK,CACRE,KAAMF,EAAME,SAEd,SAAAmC,GAAQ,MAAK,CACXyB,YAAaI,YAAmBC,EAAa9B,MALlC4B,CAObJ,GC9BIO,EFL2BC,YAAYC,EAAS1E,EAAc2E,YAAgBC,MEOpFC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OACSO,SAASC,eAAe,SPoHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.fe2f8dd5.chunk.js","sourcesContent":["import { START_BOARD, SET_SAFEPOINTS } from '../constants';\n\n// const initialState = {\n//   board: null,\n//   files: 0,\n//   columns: 0,\n//   state: \"off\",\n// }\n\nconst initialState = {\n  board: [[\"2\",\" \",\"1\",\"2\",\"4\"],[\"2\",\" \",\"1\",\"2\",\"4\"],[\"2\",\" \",\"1\",\"2\",\"4\"],[\"2\",\" \",\"1\",\"2\",\"4\"],[\"2\",\" \",\"1\",\"2\",\"4\"]],\n  files: 5,\n  columns: 5,\n  state: \"playing\",\n}\n\nexport default function authors(state = initialState, action) {\n  switch (action.type) {\n    case START_BOARD:\n      let b = [...Array(action.files)].map(item => Array(action.columns).fill(\" \")) \n      return {\n        ...state,\n        board: b,\n        files: action.files,\n        columns: action.columns,\n        state: action.state,\n      }\n    case SET_SAFEPOINTS:\n      let board = state.board\n      for (let num in action.safepoints) {\n        let sfpoints = action.safepoints[num]\n        for (let sf of sfpoints) {\n          if (sf.x >= state.files || sf.y >= state.columns || sf.x < 0 || sf.y < 0) {\n            continue\n          }\n          board[sf.x][sf.y] = num\n        }\n      }\n      return {\n        ...state,\n        board: b,\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux';\n\nimport game from './game';\n\nexport default combineReducers({\n  game\n});","export const SET_SAFEPOINTS = 'SET_SAFEPOINTS';\nexport const START_BOARD = 'START_BOARD';\n\nexport const BASE_URL = 'http://0.0.0.0:3000/api';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { BASE_URL } from './constants';\n\nfunction makeRequest(url, request) {\n  request.headers = new Headers({\n    'Content-Type': 'application/json'\n  })\n  return fetch(`${BASE_URL}/${url}`, request)\n  .then(\n      (response) => response.json()\n  )\n}\n\nexport function fetchGameState() {\n  let request = {\n    method: 'GET'\n  }\n  return makeRequest('resume', request)\n  .then(\n    (res) => res.data\n  )\n}\n\n\nexport function fetchStartGame() {\n\tlet request = {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({\n      files: 10,\n      columns: 10\n    })\n\t}\n\treturn makeRequest('new', request)\n\t.then(\n\t\t(res) => res.data\n\t)\n}\n\n","import { SET_SAFEPOINTS, START_BOARD } from '../constants';\nimport { fetchGameState, fetchStartGame } from '../apiRequests';\n\n// sync actions\n\nfunction startBoard(files, columns, state) {\n  return {\n    type: START_BOARD,\n\t\tfiles,\n\t\tcolumns,\n\t\tstate,\n  }\n}\n  \nfunction setSafePoints(safepoints) {\n  return {\n    type: SET_SAFEPOINTS,\n    safepoints\n  }\n}\n\n// thunk actions\n\n\nexport function getGameState() {\n\n  return (dispatch, getState) => {\n    \n    return fetchGameState()\n    .then(\n      (gameState) => {\n        dispatch(startBoard(gameState.files, gameState.columns, gameState.state))\n        dispatch(setSafePoints(gameState.safepoints))\n      }\n    )\n  }\n}\n\n\nexport function startGame() {\n\n  return (dispatch, getState) => {\n    \n    return fetchStartGame()\n    .then(\n      (gameState) => {\n        dispatch(startBoard(gameState.files, gameState.columns, gameState.state))\n        dispatch(setSafePoints(gameState.safepoints))\n      }\n    )\n  }\n}\n\n\nexport function resumeGame() {\n\n  return (dispatch, getState) => {\n    \n    return fetchGameState()\n    .then(\n      (gameState) => {\n        dispatch(startBoard(gameState.files, gameState.columns, gameState.state))\n        dispatch(setSafePoints(gameState.safepoints))\n      }\n    )\n  }\n}\n","import React from 'react';\n\nimport '../App.css';\n\nclass Board extends React.Component {\n    state = {}\n\n    renderCells = (row) => {\n\t\t\treturn row.map((cell, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<td key={index} className=\"Tile\">{cell}</td>\n\t\t\t\t\t)\n\t\t\t\t})\n    }\n\t\t\n\t\trenderRows = (table) => {\n\t\t\treturn table.map((row, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t{this.renderCells(row)}\n\t\t\t\t\t\t</tr>\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\n    render() {\n\t\t\tconst { board } = this.props\n            \n\t\t\treturn (\n\t\t\t\t<div className=\"Table\">\n\t\t\t\t\t{ board != null && (\n\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{this.renderRows(board)}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\n}\n\nexport default Board;","import React from 'react';\nimport '../App.css';\n\nfunction Button(props) {\n  return <div className=\"Button\" onClick={props.action}>{props.title}</div>;\n}\n\nexport default Button;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\n\nimport reducer from './Reducers';\n\nexport default (initialState) => createStore(reducer, initialState, applyMiddleware(thunk));","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport * as GameActions from '../Actions/gameActions';\nimport '../App.css';\nimport Board from '../Components/Board';\nimport Button from '../Components/Button';\n\nclass Game extends React.Component {\n    state = {}\n\n    render() {\n\t\t\tconst { board } = this.props.game\n\t\t\tconst { startGame, resumeGame } = this.props.gameActions\n\n\t\t\tconsole.log(board);\n\t\t\t\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h2>Minesweeper</h2>\n\t\t\t\t\t<Board board={board} />\n\t\t\t\t\t<div className=\"Buttons\">\n\t\t\t\t\t\t<Button title=\"New game\" action={startGame}/>\n\t\t\t\t\t\t<Button title=\"Resume game\" action={resumeGame}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\n}\n\nexport default connect(\n  state => ({\n    game: state.game,\n  }),\n  dispatch => ({\n    gameActions: bindActionCreators(GameActions, dispatch),\n  })\n)(Game)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport Game from './Containers/Game';\n\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <Game />\n    </Provider>, document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}